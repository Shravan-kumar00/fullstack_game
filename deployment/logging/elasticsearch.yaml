---
# Source: elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    chart: "elasticsearch"
    heritage: Helm
    release: elasticsearch
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpRENDQW5DZ0F3SUJBZ0lSQVBITlFjR1RWMzZFV2tIOExzTjZyOHd3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREEzTVRZd05qQTFOVGRhRncweQpOVEEzTVRZd05qQTFOVGRhTUI4eEhUQWJCZ05WQkFNVEZHVnNZWE4wYVdOelpXRnlZMmd0YldGemRHVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE1dEV6amp2Zkl6NWJkdTFWTUJ4U3BkODAKK3E5MnBNdjZCSDNuWnFCRUt2RXJqTHc4d09MOXJFZG1EbkVEWGpGUjBsK1NPbEZRam02ZHo0S01RYmJjR0NnZwo2NlVuRkcwb2xDejFiQ0tEUnJVQkU0SThJSGc5Q2kvUTM2TGVpMDFneTM2ckxNckYvb1B6MHh6ZkNna3Y0L3RICmZNMDc2S3dqOW1NbWdhWVkyaWJtRHVKVzRHRnAvSEVBVmNOTkZ1V0NBRGovUUovREp5dGc0V2c5R1VFUlh4aGgKYUwvbjNWS0V6YWR2bmU5a3VtdGtmekMxbytoQXRuMURZc2tyUzVJa0hMb2ovSHlBa1V2dmdaVTRRNzdQVThoagp4OTM1MjgraWIrVldJN0NDaE9ibU14Z0g0TzZTZitiZDlqOHFYMUxjYm5pWDVjb3VBRzBnbnRtTzJaOGxNd0lECkFRQUJvNEhDTUlHL01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlNGRGVjZ0EzamZwTjV6enJQeQpTY3lUWWxmUDJqQmZCZ05WSFJFRVdEQldnaFJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY29JY1pXeGhjM1JwClkzTmxZWEpqYUMxdFlYTjBaWEl1WkdWbVlYVnNkSUlnWld4aGMzUnBZM05sWVhKamFDMXRZWE4wWlhJdVpHVm0KWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUpJOEh2MDRJQ25jU05iaU53V1VSQXZBQmp2YwphSk5rMTRFMUZzbjAwZnhLYzRPR2FMMmt2NUFQYUw0ekN2Rk8ybkFXUkp4MkF3d0tzMEZiZ2hxV1Q4bkYxMHJiCm9yd0hqQ0gxMG1JR28yZ2ZCV1lSYWI0N2prNVVwbGt4QnRJWUZIdWxldXhSbjUzTndlNlo3N0RvdmJJT3NsQWkKRnFPWHVoVmttUzEvdytZZDIrTmY3citNUjM5ODNTb2Y4a1ZEVWRGTXNLZTVrdGRPQ0JCd1dxdnVreGxDakl3YgpUT3FCL3hia0Jab2pGZlpkT2h4VmtndGlzWWdsOCtwVHlBejdyOGx4UHdLd1BTOStEdkszdFViK1daNThPVmNZCjVDUkF3NUxIZjRWOGpzUmdsWVZ1WUYyeHhVQURIN2JQR0VEczdCSHMyRXIwbXljNmhvSjZxSCs0dlBFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNXRFempqdmZJejViZHUxVk1CeFNwZDgwK3E5MnBNdjZCSDNuWnFCRUt2RXJqTHc4CndPTDlyRWRtRG5FRFhqRlIwbCtTT2xGUWptNmR6NEtNUWJiY0dDZ2c2NlVuRkcwb2xDejFiQ0tEUnJVQkU0STgKSUhnOUNpL1EzNkxlaTAxZ3kzNnJMTXJGL29QejB4emZDZ2t2NC90SGZNMDc2S3dqOW1NbWdhWVkyaWJtRHVKVwo0R0ZwL0hFQVZjTk5GdVdDQURqL1FKL0RKeXRnNFdnOUdVRVJYeGhoYUwvbjNWS0V6YWR2bmU5a3VtdGtmekMxCm8raEF0bjFEWXNrclM1SWtITG9qL0h5QWtVdnZnWlU0UTc3UFU4aGp4OTM1MjgraWIrVldJN0NDaE9ibU14Z0gKNE82U2YrYmQ5ajhxWDFMY2JuaVg1Y291QUcwZ250bU8yWjhsTXdJREFRQUJBb0lCQUZUL21TSzV2WlEyOUd1NQpQbk8zR21CbThCV1k0L0lRQTRQLzhXVURnOWJrZFFzZ2pxYmhjRlV1L2RBM29ldmY4YWVzOWladnAyQ3NMNFVwCktBbFRFMzM1MlJXdC9kUXgxbzJxZUw1WGYweGNmNGIxb0xxOFRJNGh5YU54VU02dnNnTitJLzhjdFFqakFya3QKbXAwUmdRZE5rNmZMMUZIOGdrbkxmWFNrKytYcFZpcHpSdHNZQWhUQm9qaDBsd2dGbDllU281eXI3REFsbVRkZwpuck44TFlLS05SZVNGM1hQa08zSitXN3hRd3hyU01Ma1lIN0JpZ2krMXg0aC94ZHVjTnhVeWI2NXJ5UTB2YWdNClZrRTFybU1SRGIra2JFWlpFWlFlSzliWkI2UzJOUVRmOEFScnE3eTdjK0VSdnQ4cXlUNVdzVDQ2YUNxaDkvLzAKSmNXb3ZWRUNnWUVBODVlbjlremx5ZVMvRUJQa04xZFlmZkZKdjFBN0QvUHkxRHpWQzdnVnQ2RXoweDZmWTB5Rwp6S0kyVE94L2J3SldXRTF1NEpoc0FmcVVIU3NQb3hHNXhPNFhuZlgyM3ZWN1ZrRExPMmtyUUw0SDUxYWgyKzkzCkhXTHJKU3hIb21zdVlpcTdDQWdiM2NCR0kxTzg1eVhBWXMzaWpLQkdJRnFPcWhnWnp5dk9kTFVDZ1lFQThwTDIKT0ovaWE1UGVhbTdSTWRTTUJTdWNxenJpUFpXQy84bHl1N2lBYnRKZVA1QkFPU0JqY0w3N1c5WVcyNEE0UzFQMgo5ZlZXTFZzajcrc2dqMUZiTTIzTG1FRVV4UDhKd01TZVRaVE5JM0VlcG51YmFqOEc4d1FjdFZZbGFDZDlwYlhlCm9sUDFJdGw1NWpuUlB3a3ZSUnZJR0NrU0JPVjRRNkgzVmF1VkMwY0NnWUFVRFhEN09wdFVBbXVrRkM4ZVN5ZHkKdnJFMmVaRlRIOTdtajlkdDdvcURJbGNVMHhtRjRCL2NxcUhUdFVoTVNDSDVoTzVTdU5selZFQnJJa2RZUWpaTAp1dG5nM0FXbGx3bS9NUGhKL0w5ZHhnYjZpVXdyd2N2SmRJSXMvamNyYksxVjBYU3lGWkROc1cxVXJTa0kwamZECktuV3k0K0xCK1JKemVDWnZ3b2h0WFFLQmdRQ2Y2bnpDSmIxNkdGaW5wL2pudGV5OU45d29Fa0MyUXN2QzMwWngKTlJnT2QwZEU5azh3bWdhVWZJTnZMcnVRNTMyMVExeHJGOXRCT1hWK3BHNnByUVBINnRrdXZiRDRrZjRYQkVncwpjeTJ0OE5RNUF3SVpVQVcvemZVekl1QzBRbHlXRTBqN2tRZnBlcC9mUkR5TEp2M3Z2SG4wVzVjU2ZVa0VwVkZPClBEaWMzd0tCZ1FEU3h1bGcvQlpUdEthUVVMUnZ0cDdQdEhKS3BVSCswcEE4M21Cd3JHaVVJV3hnRGQwdjM3cjAKbjlnSEtvMUtLb1F6ZFlGNHplNW5PYXJGd0dMN1NQZnBRQVJSY21wUFpMQmdyM1JqLzRVbVBMZ09zNTlFZFZ3KwpXNWh5dUhSbnNzMlhKV3FlYVdGQVNUcjF4NGRLWmtzRTUrMFpNRFFGbkQybGZXS2VGWkRodGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQUorVUFBNGlhSkNnUmoyYncyVDdjTE13RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREEzTVRZd05qQTFOVGRhRncweQpOVEEzTVRZd05qQTFOVGRhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQjdNQUFRSm90Qk9wU2JmT05vSXJGb2pva3Y4ZnoKNnhnbHc1UmlLNTl3a1lEN09hREsyd2E0c0FFVzB3ZnE3c09wUmxwcDdLYlIwNUF1eUFqaE83OHZKeUFCcm9HaQpKSzZWY0oxelZ3YkJhR2M1SmM5MzhLMHRlV3ZYaUhhRXlnZlo0bVBmK0xnSndEUUVJRGpDTDNaVTZjU09Lam1iCjNpU3hKZ1A5b05WSFVITG1McWVRL0swVkFyVkRlejAvNGlVajlPand0KzV6dW05SDV0L2gzWklmSkpQZEFheTkKUkFlMVdibzNGL1RhQWlscGNwc2tMekNSbnUzdHh0VXl1L01abVhZcWM0Zk5Tc0MzOGhaWkxXYURTS2daVjhKNQpoME5IcCtnUVJNSGxuSlN0M1IzLy85VXVVVzQxUVVjblNhVUFlckwxcWxPbmkrRWtTNnEyTlZheEFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWhRM25JQU40MzZUZWM4Nno4a25NazJKWAp6OW93RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUhnUTBFRHNoN0JpL2RYbU1IUTE0eGNDNXBHSHRuK1FLVEo4CkhGWG5NY2Y3Q0lUM2sydVE4eGtiRGE5N0psdS9tMDcvVVVJT1BYU3BPeXdqMk55NGs5RVdGOWs4TFVjVjA4MjAKejhGL0ZiZ1AxMTEwQ3Y0eVJvOVJzU01aMDBzTHlxQTBaWHd6emV3anF3bmJnREZ1eXFzTVpibldqWnIzcnlQVwowZFBidVR1Qjcvb2toT0MvcFhNUXFqcFRqUXBaaTVuTHYwQW91YytIWkgyV01BS29sMmZlYlVxRWVPMDVrWVpmCkNhNHBzUjk2ZElaUXo0QndMMnB5YnJRci9tSnhzQVQyL2NJK1Bvc0xFb25nZDlieFVNVmdhVVpscWVmeGNRcXEKR0JSZ3h6Yi9KTXd2c0haMW42MHA2NEczYWxUTHA1VEdudk5Bd1E5RDVUeDdGRE5LbGZVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "REx4RGRUUzRPS1pISmN4MQ=="
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
      labels:
        release: "elasticsearch"
        chart: "elasticsearch"
        app: "elasticsearch-master"
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
      storageClassName: gp2
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "elasticsearch"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: elasticsearch-master-certs
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}

      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
          - name: node.roles
            value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-master-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: "certificate"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.http.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.http.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.http.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
---
# Source: elasticsearch/templates/test/test-elasticsearch-health.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "elasticsearch-xcuqn-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
  - name: "elasticsearch-olyfv-test"
    env:
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            name: elasticsearch-master-credentials
            key: password
    image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
    imagePullPolicy: "IfNotPresent"
    command:
      - "sh"
      - "-c"
      - |
        #!/usr/bin/env bash -e
        curl -XGET --fail --cacert /usr/share/elasticsearch/config/certs/tls.crt -u "elastic:${ELASTIC_PASSWORD}" https://'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
    volumeMounts:
      - name: elasticsearch-certs
        mountPath: /usr/share/elasticsearch/config/certs
        readOnly: true
  restartPolicy: Never
  volumes:
    - name: elasticsearch-certs
      secret:
        secretName: elasticsearch-master-certs
